<svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="Layer_1" x="0" y="0" viewBox="0 0 58 12.6" style="enable-background:new 0 0 58 12.6" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><style>.st0{fill:#745acc}</style><path class="st0" d="M6.9 4c0-.4-.2-.7-.4-.9-.3-.3-.7-.4-1.2-.4-.3 0-.6 0-.8.1-.3.1-.4.2-.5.4-.2.1-.2.3-.2.5 0 .1 0 .3.1.4 0 .1.1.2.3.3s.3.2.5.3c.2.1.5.1.8.2l1 .2c.7.1 1.3.3 1.7.6.5.2.9.5 1.2.8.3.3.5.7.7 1.1.1.4.2.8.2 1.3 0 .8-.2 1.5-.6 2.1-.4.6-1 1-1.7 1.3-.7.3-1.6.4-2.7.4s-2-.2-2.8-.5c-.8-.3-1.4-.8-1.8-1.5C.2 10 0 9.2 0 8.1h3.2c0 .4.1.7.3.9s.4.4.7.6c.3.1.7.2 1.1.2.4 0 .7 0 .9-.1.2-.1.4-.2.5-.4.1-.1.2-.3.2-.5s-.1-.4-.2-.5-.3-.2-.6-.4-.6-.2-1.1-.3l-1.2-.2c-1.1-.3-1.9-.7-2.6-1.2C.6 5.6.3 4.9.3 3.9c0-.8.2-1.5.6-2 .4-.6 1-1 1.8-1.4C3.4.2 4.3 0 5.3 0s1.8.2 2.6.5c.7.3 1.3.8 1.7 1.4.4.6.6 1.3.6 2.1H6.9zM22.1 4.8h-3.4c0-.3-.1-.5-.2-.8-.1-.2-.2-.4-.4-.6-.2-.2-.4-.3-.6-.4-.3-.1-.5-.1-.9-.1-.6 0-1 .1-1.4.4-.4.3-.7.7-.9 1.2-.2.5-.3 1.1-.3 1.8 0 .8.1 1.4.3 1.9.2.5.5.9.9 1.1.4.3.8.4 1.4.4.3 0 .6 0 .8-.1.2-.1.5-.2.6-.3.2-.1.3-.3.4-.5.1-.2.2-.4.2-.7H22c0 .5-.2 1-.4 1.6-.3.5-.6 1-1.1 1.5-.5.5-1 .8-1.7 1.1-.7.3-1.5.4-2.4.4-1.1 0-2.1-.2-3-.7-.9-.5-1.6-1.2-2.1-2.1-.5-.9-.8-2.1-.8-3.4 0-1.4.3-2.5.8-3.5.5-.9 1.2-1.6 2.1-2.1.9-.5 1.9-.7 3-.7.8 0 1.5.1 2.1.3.7.2 1.2.5 1.7.9s.9.9 1.2 1.5c.5.4.6 1.1.7 1.9zM22.7 12.4V.2H28c.9 0 1.7.2 2.4.5s1.2.8 1.6 1.4.6 1.4.6 2.2c0 .9-.2 1.6-.6 2.2-.4.6-.9 1.1-1.6 1.4-.7.3-1.5.5-2.5.5h-3.2V5.8h2.5c.4 0 .7 0 1-.1.3-.1.5-.3.6-.5.2-.2.3-.5.3-.9s-.1-.6-.2-.9c-.1-.2-.4-.4-.6-.5-.3-.1-.6-.2-1-.2H26v9.6h-3.3zm7.2-5.6 3.1 5.6h-3.6l-3-5.6h3.5zM37.1.2v12.3h-3.3V.2h3.3zM38.5 12.4V.2h5.3c.9 0 1.7.1 2.4.4.6.3 1.1.6 1.4 1.1.3.5.5 1 .5 1.6 0 .5-.1.9-.3 1.2-.2.4-.5.7-.8.9-.4.2-.8.4-1.2.5V6c.5 0 1 .2 1.4.4s.8.6 1 1c.3.4.4.9.4 1.5 0 .7-.2 1.3-.5 1.8s-.8.9-1.5 1.2c-.6.3-1.4.4-2.3.4h-5.8zm3.4-7.3h1.4c.3 0 .5 0 .8-.1.2-.1.4-.2.5-.4.1-.2.2-.4.2-.6 0-.4-.1-.7-.4-.9-.3-.2-.6-.3-1-.3H42v2.3zm0 4.7h1.6c.6 0 1-.1 1.3-.3.3-.2.4-.5.4-.9 0-.3-.1-.5-.2-.7-.1-.2-.3-.4-.6-.5-.2-.1-.5-.2-.9-.2h-1.6v2.6zM49.2 12.4V.2H58v2.7h-5.5V5h5.1v2.7h-5.1v2.1H58v2.7h-8.8z"/></svg>